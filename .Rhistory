# rnorm(500) will just generate 500 values from a standard normal distribution
# mean = 0, sd = 1
# so a plot of this is not very helpful
# but not the axis titles
plot(rnorm(500))
# we can visualize what this looks like
x <- rnorm(500)
# as a list
x
# as a histogram - much better!
hist(x)
# mean, sd, median
mean(x)
sd(x)
median(x)
# what if we increase to 1000000?
x <- rnorm(1000000)
mean(x)
sd(x)
median(x)
hist(x)
# R is like a big calulator
# addition
2 + 2
# this is e^1
exp(1)
exp(-2)
# we already know rnorm() - random values from a NORMAL distribution
rnorm(15)
# assignment can be done with = or <-
# note that == is "equals" not assignment!
# != means not equal too (similar to <> in Access)
# more on that later
x <- 2
x
x + x
# create a vector for weight
weight <- c(60, 72, 57, 90, 95, 72)
# show values for weight
weight
# create a vector for height
height <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
# show values for height
height
# create a new variable from those two
bmi <- weight/height^2
bmi
# sum all values in the vector "weight"
sum(weight)
# this is a way we can calculate the mean of the vector
sum(weight)/length(weight)
# here's a better way
mean(weight)
# we can assign it
xbar <- sum(weight)/length(weight)
# this is the actual value minus the mean
weight - xbar
# acutal minus mean squared
(weight - xbar)^2
# what's this quantity?! THE VARIANCE!
sum((weight - xbar)^2)
# this is the standard deviation
sqrt(sum((weight - xbar)^2)/(length(weight) - 1))
# average of the vector
mean(weight)
# sd of the vector
sd(weight)
# see if the average bmi is different than 22.5
mean(bmi)
t.test(bmi, mu=22.5)
# make a plot of those two variables
# with this notation, we are relying on positional arguments
# that is, ORDER DICTATES WHAT THE FUNCTION DOES
plot(height,weight)
# since you are newbies, you should opt to be explicit
# like this:
plot(x=height, y=weight) # foolproof!
# if (.make.epsf) dev.copy2eps(file="h-w.ps")
# plot(height, weight, pch=2)
# if (.make.epsf) dev.copy2eps(file="h-w-triangle.ps")
# hh <- c(1.65, 1.70, 1.75, 1.80, 1.85, 1.90)
# lines(hh, 22.5 * hh^2)
# if (.make.epsf) dev.copy2eps(file="h-w-line.ps")
# this shows you all the arguments that goes in a plot
args(plot.default)
# so does the documentation (you're best friend)
?plot
# here's a vector of strings
c("Huey","Dewey","Louie")
# here's a vector of LOGICALS
c(T,T,F,T)
# good quiz question: how many different types of data are there in R?
# numeric, integer, logical, character, factor... more?
# here's a logical test
bmi > 25
# verify your answer
bmi
# i never use this function, i always use paste0()
# tell me what it does?
cat(c("Huey","Dewey","Louie"))
cat("Huey","Dewey","Louie", "\n")
cat("What is \"R\"?\n")
# it's easy to combine vectors of different sizes into ONE GIANT VECTOR
c(42,57,12,39,1,3,4)
x <- c(1, 2, 3)
y <- c(10, 20)
c(x, y, 5)
# this forms a dataframe (kind of)
x <- c(red="Huey", blue="Dewey", green="Louie")
x
names(x)
# more examples of vectors
x <- c(FALSE, 3) # note that these are both numbers
x/2
# try it again, div by 2 will fail!
x <- c(pi, "abc")
x/2
# note how everything becomes a string (with "")
c(FALSE, "abc")
# this makes a nice sequence
# this is a range
4:9
# this is a sequence
seq(4,10,2)
# this is some weird use of the rep() function
oops <- c(7,9,13)
rep(oops,3)
rep(oops,1:3)
rep(1:2,c(10,15))
# dim() and length() and width() are very useful
# know what they do!
x <- 1:12
dim(x) # cause it's one dimension, it doesn't exist!
length(x)
width(x) # doesn't exist because it's one dimensional!
# this forces it into 3 rows and 4 columns
dim(x) <- c(3,4)
x
# this makes a matrix of values...
# i've never ever used this, but you could i gues...
# play with different values than 1:12 or nrow...
# just make sure it's divisible
matrix(1:12,nrow=3,byrow=T)
x <- matrix(1:12,nrow=3,byrow=T)
rownames(x) <- LETTERS[1:3]
x
colnames(x) <- c("D","A","V","E")
x
# this is transpose (rows become columns, columns become rows)
t(x)
# cbind() is column bind
cbind(A=1:4,B=5:8,C=9:12)
# rbind() is row bind
rbind(A=1:4,B=5:8,C=9:12)
# factors are useful when strings have an order
# like movie reviews: low, medium, high etc.
pain <- c(0,3,2,2,1)
# this creates an empty place to store the levels
fpain <- factor(pain,levels=0:3)
# here's where we fill in the levels
levels(fpain) <- c("none","mild","medium","severe")
# here are the values
fpain
# and convert back to numeric - but note that it's 1:4 not 0:3... be careful!
as.numeric(fpain)
# factors can be annoying... "character" via as.character() is helpful
levels(fpain)
# a vector of numbers
intake.pre <- c(5260,5470,5640,6180,6390,
6515,6805,7515,7515,8230,8770)
# another vector of numbers
intake.post <- c(3910,4220,3885,5160,5645,
4680,5265,5975,6790,6900,7335)
# lists are OK... but I never use them... dataframes are more intuitive
mylist <- list(before=intake.pre,after=intake.post)
mylist
mylist$before
# you could make one this way
d <- data.frame(intake.pre,intake.post)
d
# or you could do a cbind() then make a dataframe
d <- cbind(intake.pre, intake.post)
d <- as.data.frame(d)
# get the column of "intake.pre" values
d$intake.pre
# return the 5th row entry
intake.pre[5]
# return the 3rd, 5th and 7th row entries
intake.pre[c(3,5,7)]
# we can use other variables to subset
v <- c(3,5,7)
intake.pre[v]
# we can use a range (:) to subset
intake.pre[1:5]
# - is dangerous, but convient!
# this mean return everything BUT the 3rd, 5th and 7th rows
intake.pre[-c(3,5,7)]
# this is how we subset valus > 7000
intake.post[intake.pre > 7000]
# we can combine functions just like excel, but using & ("ampersand")
intake.post[intake.pre > 7000 & intake.pre <= 8000]
# this returns a logical!
intake.pre > 7000 & intake.pre <= 8000
# let's try subsetting
d <- data.frame(intake.pre,intake.post)
# fifth row, first column
d[5,1]
# fifth row, ALL COLUMNS
d[5,]
# return ALL ROWS where intake.pre>7000
d[d$intake.pre>7000,]
# we can assign that subset to ANOTHER OBJECT "sel" (selection)
sel <- d$intake.pre>7000
sel
# return a subset where true
d[sel,]
# return first two rows
d[1:2,]
# show first few rows
head(d)
# show last few rows
tail(d)
# WHAT IS ENERGY?! CHECK BOOK
library(ISwR)
# once you load the package, this dataset comes to life
energy
exp.lean <- energy$expend[energy$stature=="lean"]
exp.obese <- energy$expend[energy$stature=="obese"]
# the split() function can also help...
l <- split(energy$expend, energy$stature)
l
# this is a dataset
thuesen
# lapply makes a list
lapply(thuesen, mean, na.rm=T)
# sapply is simpler and gives a vector or matrix
sapply(thuesen, mean, na.rm=T)
# more on this later...
# this creates 10 sample means of a standard normal dist with 20 entries
replicate(10,mean(rnorm(20)))
# this makesm matrix of values with rows and columns
m <- matrix(rnorm(12),4)
m
# this takes the min of each column
apply(m, 2, min)
# this takes the min of each row?
apply(m, 1, min)
# this makes a table "T apply"
tapply(energy$expend, energy$stature, median)
# much easier than subsetting data! how would you do this? try on your own.
# subset data by group, calculate median, cbind them together, colnames! lots of code..
# intake is more data from the ISWR package
intake
# here's the vector of values
intake$post
# we can sort the values
# by default it's low to high
# use ?sort to sort high to low
sort(intake$post)
# this gives the order of low to high values
order(intake$post)
# you can save the order for use later
o <- order(intake$post)
# you can use this to subset data if you want!
intake$post[o]
intake$pre[o]
intake.sorted <- intake[o,]
# YOU DON'T NEED TO SAVE THE IMAGE FOR LATER...
# JUST RUN YOUR CODE AGAIN...
# THIS WILL ONLY LEAD TO CPU MEMORY PROBLEMS LATER ON!
# save.image("ch1.RData")
# this statement clears all the variables
rm(list=ls())
# this removes the package from use
while(search()[1] != "package:ISwR") detach()
# after doing this, you won't have access to any of the built-in functions
# or datasets that came from ISwR
theusen # see? Can't use it!
# need help with rnorm?
?rnorm
# rnorm(500) will just generate 500 values from a standard normal distribution
# mean = 0, sd = 1
# so a plot of this is not very helpful
# but not the axis titles
plot(rnorm(500))
# we can visualize what this looks like
x <- rnorm(500)
# as a list
x
# as a histogram - much better!
hist(x)
# mean, sd, median
mean(x)
sd(x)
median(x)
# what if we increase to 1000000?
x <- rnorm(1000000)
mean(x)
sd(x)
median(x)
hist(x)
mydata = read.csv("BDL_clean.csv")
mydata = read.csv("BDL_clean.csv")
mydata = read.csv("BDL_clean.csv")
setwd("C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts")
mydata = read.csv("BDL_clean.csv")
library("")
library(lubridate)
data = read.csv("BDL_clean.csv")
data = read.csv("BDL_clean.csv")
setwd("C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts")
data = read.csv("BDL_clean.csv")
library(lubridate)
data$Month = lubridate::month(mydata$valid)
data$Day = lubridate::day(mydata$valid)
data$Year = lubridate::year(mydata$valid)
setwd("C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts")
data = read.csv("BDL_clean.csv")
library(lubridate)
data$Month = lubridate::month(data$valid)
data$Day = lubridate::day(data$valid)
data$Year = lubridate::year(data$valid)
str(mydata$valid)
str(data$valid)
setwd("C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts")
data = read.csv("BDL_clean.csv")
library(lubridate)
str(data$valid)
data$Month = lubridate::month(data$valid)
data$Day = lubridate::day(data$valid)
data$Year = lubridate::year(data$valid)
setwd("C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts")
data = read.csv("BDL_clean.csv")
library(lubridate)
str(mydata)
data$valid = lubridate::mdy_hm(data$valid)
str(data$valid)
data$Month = lubridate::month(data$valid)
data$Day = lubridate::day(data$valid)
data$Year = lubridate::year(data$valid)
data$Month <- ifelse(data$Month<10,
paste0('0',data$Month),
data$Month)
data$Day <- ifelse(data$Day<10,
paste0('0',data$Day),
data$Day)
data$MMDD = paste0(data$Month,'-',data$Day)
data
View(data)
data$Minute = lubridate::year(data$tmpf)
data$Hour = lubridate::year(data$tmpf)
str(data$tmpf)
data$Minute = lubridate::year(data$tmpf)
data$Hour = lubridate::year(data$tmpf)
setwd("C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts")
wd <- "C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts"
wd <- "C:/Users/kasat/OneDrive/Documents/Statisctics/R scripts"
# download Confirmed Cases
urlfile <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"
CONFIRMED <- read_csv(url(urlfile))
# rename it
mydata <- CONFIRMED
CONFIRMED <- read.csv(url(urlfile))
setwd("C:\Users\kumar\Downloads\Courses\project\R\Assignment1")
setwd("C:\Users\kumar\Downloads\Courses\project\R\Assignment1")
setwd("C:/Users/kumar/Downloads/Courses/project/R/Assignment1")
###Question 1 opening data
townList <- read.csv("List_of_Towns.csv")
realEstate <- read.csv("Real_Estate_Sales_2014-2016.csv")
str(townList)
View(realEstate)
View(realEstate)
View(townList)
View(townList)
mergedSet <- merge(x = townList,
y = realEstate,
by.x = "Town",
by.y = "Town")
View(mergedSet)
###Question 2 Filtering out missing data
#In order to find missing data, we can check the summary to see which columns have missing data
summary(mergedSet)
#As we can see, ResidentialType, Address and SalesAmount have NA's
#To check unidentified column types, using str()
str(mergedSet)
setwd("C:/Users/kumar/Downloads/Courses/project/R/Assignment1")
###Question 1 opening data
townList <- read.csv("List_of_Towns.csv")
realEstate <- read.csv("Real_Estate_Sales_2014-2016.csv")
mergedData <- merge(x = townList,
y = realEstate,
by.x = "Town",
by.y = "Town")
###Question 2 Filtering out missing data
#In order to find missing data, we can check the summary to see which columns have missing data
summary(mergedData)
#As we can see, ResidentialType, Address and SalesAmount have NA's
#To check unidentified column types, using str()
str(mergedSet)
#As we can see, ResidentialType, Address and SalesAmount have NA's
#To check unidentified column types, using str()
str(mergedData)
#we are not able to identify the data type of date recorded
CheckMissingData <- mergedSet[is.na(mergedData$DateRecorded),]
#we are not able to identify the data type of date recorded
CheckMissingData <- mergedData[is.na(mergedData$DateRecorded),]
View(CheckMissingData)
#We'll use lubridate to change the format of dates in DateRecorded column
mergedData$DateRecorded = lubridate::mdy(mergedData$DateRecorded)
missingDataCheck1 <- mergedData[is.na(mergedData$DateRecorded),]
# We got 6 observations with missing values in DateRecorded column
missingDataCheck2 <- mergedData[is.na(mergedData$SaleAmount),]
# We got 5283 observations with missing values in SaleAmount column
missingDataCheck3 <- mergedData[is.na(mergedSet$ResidentialType),]
# We got 5283 observations with missing values in SaleAmount column
missingDataCheck3 <- mergedData[is.na(mergedData$ResidentialType),]
# We got 11905 observations with missing values in ResidentialType column
missingDataCheck4 <- mergedData[is.na(mergedData$Address),]
###Question 3
#Replacing missing dateRecorded data
missingDataCheck1$DateRecorded = "01-01-2014"
#which(is.na(missingDataCheck1$DateRecorded))
missingDataCheck1$DateRecorded = lubridate::mdy(missingDataCheck1$DateRecorded)
View(missingDataCheck1)
View(missingDataCheck1)
#Replacing missing Sales Amount data
missingDataCheck2$SaleAmount = missingDataCheck2$AssessedValue
View(missingDataCheck2)
View(missingDataCheck2)
#Adding subset to the dataseet
clean = mergedData[is.na(mergedData$DateRecorded)==F,]
View(clean)
clean = clean[is.na(clean$SaleAmount)==F,]
#combining the subsets
mergedSetFinal = rbind(clean,missingDataCheck1,missingDataCheck2)
mergedSetFinal$PropertyValue = ifelse(mergedSetFinal$AssessedValue <= 300000,"LowRange",
ifelse(mergedSetFinal$AssessedValue > 800000,"HighRange","MidRange"))
###Question5 measure of central tendancy and variability
#Using describe function to get statistical values
salesAmountDesc = psych::describe(mergedSetFinal$SaleAmount)
salesAmountDesc
AssessedValDesc = psych::describe(mergedSetFinal$AssessedValue)
AssessedValDesc
populationValDesc = gsub(",","",mergedSetFinal$Population..in.2010.)
?gsub()
View(mergedSetFinal)
mergedSetFinal$populationValDesc1 = as.numeric(mergedSetFinal$populationValDesc)
mergedSetFinal$populationValDesc1 = as.numeric(mergedSetFinal$populationValDesc)
mergedSetFinal$populationValDesc = gsub(",","",mergedSetFinal$Population..in.2010.)
mergedSetFinal$populationValDesc1 = as.numeric(mergedSetFinal$populationValDesc)
mergedSetFinal$populationValDesc2 = psych::describe(mergedSetFinal$populationValDesc1)
View(mergedSetFinal)
View(mergedSetFinal)
populationValDesc2 = psych::describe(mergedSetFinal$populationValDesc1)
populationValDesc2
###Question 6
library(ggplot2)
par(mfrow=c(2,2))
# top left
plot(density(mergedSetFinal$ListYear, main="List Year", xlab = "List Year"))
# top right
hist(mergedSetFinal$ListYear, main="List Year",xlab = "List Year")
# bottom left
boxplot(mergedSetFinal$ListYear, main= "List Year", xlab = "List Year")
# bottom right
hist(mergedSetFinal$ListYear, xlab = "List Year")
lines(density(mergedSetFinal$ListYear),xlab = "List Year")
#Story telling
par(mfrow=c(2,2))
plot(x = mergedSetFinal$ResidentialType, y = mergedSetFinal$SaleAmount)
# bottom right
density(mergedSetFinal$ListYear, xlab = "List Year")
###Question 6
library(ggplot2)
par(mfrow=c(2,2))
# top left
plot(density(mergedSetFinal$ListYear, main="List Year", xlab = "List Year"))
# top right
hist(mergedSetFinal$ListYear, main="List Year",xlab = "List Year")
# bottom left
boxplot(mergedSetFinal$ListYear, main= "List Year", xlab = "List Year")
# bottom right
hist(mergedSetFinal$ListYear, xlab = "List Year")
lines(density(mergedSetFinal$ListYear),xlab = "List Year")
?lines
lines(mergedSetFinal$ListYear,xlab = "List Year")
lines(mergedSetFinal$ListYear,xlab = "List Year", type = "l",
col = "red" , lty = 2 , lwd = 1.5)
#Story telling
par(mfrow=c(2,2))
plot(x = mergedSetFinal$ResidentialType, y = mergedSetFinal$SaleAmount)
#Story telling
par(mfrow=c(2,2))
plot(x = mergedSetFinal$ResidentialType, y = mergedSetFinal$SaleAmount)
?lines
?plot
max(mergedSetFinal$ListYear)
max(mergedSetFinal$AssessedValue)
plot(x = mergedSetFinal$ListYear,y =mergedSetFinal$AssessedValue,
xlim = 2020 , ylim = 140000000 )
plot(x = mergedSetFinal$ListYear,y =mergedSetFinal$AssessedValue,
xlim = 20000 , ylim = 140000000 )
plot(x = mergedSetFinal$ListYear,y =mergedSetFinal$AssessedValue,
xlim = 20000000 , ylim = 140000000 )
plot(x = mergedSetFinal$ListYear,y =mergedSetFinal$AssessedValue,
xlim = 10000 , ylim = 140000)
plot(x = mergedSetFinal$ListYear,y =mergedSetFinal$AssessedValue,
xlim = 1 , ylim = 1)
plot(x = mergedSetFinal$ListYear,y =mergedSetFinal$AssessedValue,
xlim = 10 , ylim = 1)
plot(x = mergedSetFinal$ListYear,y =mergedSetFinal$AssessedValue,
xlim = 100 , ylim = 1)
